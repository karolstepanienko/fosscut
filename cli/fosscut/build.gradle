import org.apache.tools.ant.taskdefs.condition.Os

plugins {
    // Apply the application plugin to add support for building a CLI application in Java.
    id 'application'
    id 'org.graalvm.buildtools.native' version '0.10.3'
}

repositories {
    // Use Maven Central for resolving dependencies.
    mavenCentral()
}

dependencies {
    implementation libs.picocli
    implementation libs.ortools
    implementation libs.jackson
    annotationProcessor libs.picoclicodegen
    // Use JUnit test framework.
    testImplementation libs.junit
}

configurations {
    // add a custom configuration
    jarConfiguration
    jarConfiguration.extendsFrom(implementation)
}

// Apply a specific Java toolchain to ease working on different environments.
java {
    toolchain {
        languageVersion = JavaLanguageVersion.of(21)
    }
}

def generatedResources = "$buildDir/generated-resources/main"
sourceSets {
    main {
        // register an output folder on the main SourceSet:
        output.dir(generatedResources, builtBy: 'generateVersionTxt')
        // it is now a part of the 'main' classpath and will be a part of the jar
    }
}

tasks.register('generateVersionTxt') {
    description 'Creates a version.txt file with build info that is added to the root of the jar'
    doLast {
        new File(generatedResources).mkdirs()
        File generated = new File(generatedResources, "version.txt")
        generated.text = "Version: $rootProject.version\n" \
            + "Buildtime: ${new java.text.SimpleDateFormat("yyyy-MM-dd HH:mm:ss").format(new Date())}\n" \
            + "Application-name: $project.name"
    }
}

compileJava {
    options.compilerArgs += ["-Aproject=${project.group}/${project.name}"]
}

application {
    mainClass = 'com.fosscut.FossCut'
}

jar {
    manifest {
        attributes 'Main-Class': application.mainClass
    }

    // add all configuration dependencies to the jar
    from {
        configurations.jarConfiguration.collect { it.isDirectory() ? it : zipTree(it) }
    }
    duplicatesStrategy = DuplicatesStrategy.EXCLUDE

    // add graalvm native-image configuration to jar
    // based on it 'native-image' binary will know what resources to include
    metaInf {
        from 'jar/native-image.properties'
        from 'jar/reflect-config.json'
        if (Os.isFamily(Os.FAMILY_UNIX) && !Os.isFamily(Os.FAMILY_MAC)) {
            from 'jar/linux-x86-64/'
        }
        if (Os.isFamily(Os.FAMILY_WINDOWS)) {
            from 'jar/win32-x86-64/'
        }
        into 'native-image'
    }
}
